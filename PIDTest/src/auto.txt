/*

void driveTo(double xcord, double ycord){
  ycord = ycord * -1;
  xcord = xcord * -1;
  pros::c::gps_status_s_t status1 = GPSensor.get_status();
  double a1 = GPSensor.get_heading();
  pros::delay(10);
  pros::c::gps_status_s_t status2 = GPSensor.get_status();
  double a2 = GPSensor.get_heading();
  pros::delay(10);
  pros::c::gps_status_s_t status3 = GPSensor.get_status();
  double a3 = GPSensor.get_heading();
  pros::delay(10);
  pros::c::gps_status_s_t status4 = GPSensor.get_status();
  double a4 = GPSensor.get_heading();
  pros::delay(10);
  pros::c::gps_status_s_t status5 = GPSensor.get_status();
  double a5 = GPSensor.get_heading();
  pros::delay(10);
  pros::c::gps_status_s_t status6 = GPSensor.get_status();
  double a6 = GPSensor.get_heading();
  pros::delay(10);
  pros::c::gps_status_s_t status7 = GPSensor.get_status();
  double a7 = GPSensor.get_heading();
  pros::delay(10);
  pros::c::gps_status_s_t status8 = GPSensor.get_status();
  double a8 = GPSensor.get_heading();
  pros::delay(10);
  pros::c::gps_status_s_t status9 = GPSensor.get_status();
  double a9 = GPSensor.get_heading();
  pros::delay(10);
  pros::c::gps_status_s_t status10 = GPSensor.get_status();
  double a10 = GPSensor.get_heading();
  double xcomp = 0.0;
  double ycomp = 0.0;
  double angle = 0.0;
  double a = 0.0;
  double tempangle = 0.0;
  QAngle qangle = 0_deg;
  double nxcomp = 0.0;
  double nycomp = 0.0;
  double distance = 0.0;
  QLength test = 0_m;
  double x1 = status1.x;
  double y1 = status1.y;
  double x2 = status2.x;
  double y2 = status2.y;
  double x3 = status3.x;
  double y3 = status3.y;
  double x4 = status4.x;
  double y4 = status4.y;
  double x5 = status5.x;
  double y5 = status5.y;
  double y6 = status6.y;
  double x6 = status6.x;
  double x7 = status7.x;
  double y7 = status7.y;
  double x8 = status8.x;
  double y8 = status8.y;
  double x9 = status9.x;
  double y9 = status9.y;
  double x10 = status10.x;
  double y10 = status10.y;
  xcomp = ((x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10)/10) + xcord;
  ycomp = ((y1 + y2 + y3 + y4 + y5 + y6 + y7 + y8 + y9 + y10)/10) + ycord;
  if(xcomp >= 0 && ycomp >= 0){
    angle = atan(xcomp/ycomp)*57.2957757776502 + 180;
  }
  if(xcomp >= 0 && ycomp < 0){
    angle = abs(atan(xcomp/ycomp)*57.2957757776502);
    angle = 360 - angle;
  }
  else if(xcomp < 0 && ycomp >= 0){
    angle = 180 - abs(atan(xcomp/ycomp)*57.2957757776502);
  }
  else if(xcomp < 0 && ycomp < 0){
    angle = atan(xcomp/ycomp)*57.2957757776502;
  }
  a = (a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8 + a9 + a10)/10;

  if(a <= 180){
    a = a + 180;
  }
  else{
    a = a - 180;
  }
  tempangle = (angle - a);;
  if(tempangle > 180){
    tempangle = tempangle - 360;
  }
  qangle = (1_deg)*(tempangle);
  //Example of how to impliment it
  //Its going to be in meters instead of inches now just because of the way the GPS sensor works
  //It also works as a cartesian plane, so the center of the field is (0,0)
  pros::delay(25);
  chassis->setState({0_in, 0_in, 0_deg});
  pros::delay(25);
  chassis->turnAngle(qangle);
  pros::delay(25);
  xcomp = ((x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10)/10) + xcord;
  ycomp = ((y1 + y2 + y3 + y4 + y5 + y6 + y7 + y8 + y9 + y10)/10) + ycord;
  distance = pow(xcomp, 2.0) + pow(ycomp, 2.0);
  distance = sqrt(distance);
  test = (1_m * distance);
  pros::delay(25);
  //chassis->moveDistance(test);
}

void moveDistance(double xcord, double ycord){
  ycord = ycord * -1;
  double distance = 0.0;
  double xcomp = 0.0;
  double ycomp = 0.0;
  QLength test = 0_m;
  pros::c::gps_status_s_t status1 = GPSensor.get_status();
  pros::delay(10);
  pros::c::gps_status_s_t status2 = GPSensor.get_status();
  pros::delay(10);
  pros::c::gps_status_s_t status3 = GPSensor.get_status();
  pros::delay(10);
  pros::c::gps_status_s_t status4 = GPSensor.get_status();
  pros::delay(10);
  pros::c::gps_status_s_t status5 = GPSensor.get_status();
  pros::delay(10);
  pros::c::gps_status_s_t status6 = GPSensor.get_status();
  pros::delay(10);
  pros::c::gps_status_s_t status7 = GPSensor.get_status();
  pros::delay(10);
  pros::c::gps_status_s_t status8 = GPSensor.get_status();
  pros::delay(10);
  pros::c::gps_status_s_t status9 = GPSensor.get_status();
  pros::delay(10);
  pros::c::gps_status_s_t status10 = GPSensor.get_status();
  double x1 = status1.x;
  double y1 = status1.y;
  double x2 = status2.x;
  double y2 = status2.y;
  double x3 = status3.x;
  double y3 = status3.y;
  double x4 = status4.x;
  double y4 = status4.y;
  double x5 = status5.x;
  double y5 = status5.y;
  double y6 = status6.y;
  double x6 = status6.x;
  double x7 = status7.x;
  double y7 = status7.y;
  double x8 = status8.x;
  double y8 = status8.y;
  double x9 = status9.x;
  double y9 = status9.y;
  double x10 = status10.x;
  double y10 = status10.y;
  xcomp = ((x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10)/10) + xcord;
  ycomp = ((y1 + y2 + y3 + y4 + y5 + y6 + y7 + y8 + y9 + y10)/10) + ycord;
  distance = pow(xcomp, 2.0) + pow(ycomp, 2.0);
  distance = sqrt(distance);
  test = (1_m * distance);
  pros::delay(25);
  chassis->moveDistance(test);
  pros::c::gps_status_s_t status11 = GPSensor.get_status();
  pros::screen::print(TEXT_MEDIUM, 1, "X Position: %3f", status11.x);
  pros::screen::print(TEXT_MEDIUM, 3, "Y Position: %3f", status11.y);
}
/*
void Drive2to (double xcord, double ycord){
  bool bool1 = true;
  double xcomp = 0;
  double ycomp = 0;
  double angle = 0;
  ycord = ycord * -1;
  pros::c::gps_status_s_t status1 = GPSensor.get_status();
  double a1 = GPSensor.get_heading();
  pros::delay(10);
  pros::c::gps_status_s_t status2 = GPSensor.get_status();
  double a2 = GPSensor.get_heading();
  pros::delay(10);
  pros::c::gps_status_s_t status3 = GPSensor.get_status();
  double a3 = GPSensor.get_heading();
  pros::delay(10);
  pros::c::gps_status_s_t status4 = GPSensor.get_status();
  double a4 = GPSensor.get_heading();
  pros::delay(10);
  pros::c::gps_status_s_t status5 = GPSensor.get_status();
  double a5 = GPSensor.get_heading();
  pros::delay(10);
  pros::c::gps_status_s_t status6 = GPSensor.get_status();
  double a6 = GPSensor.get_heading();
  pros::delay(10);
  pros::c::gps_status_s_t status7 = GPSensor.get_status();
  double a7 = GPSensor.get_heading();
  pros::delay(10);
  pros::c::gps_status_s_t status8 = GPSensor.get_status();
  double a8 = GPSensor.get_heading();
  pros::delay(10);
  pros::c::gps_status_s_t status9 = GPSensor.get_status();
  double a9 = GPSensor.get_heading();
  pros::delay(10);
  pros::c::gps_status_s_t status10 = GPSensor.get_status();
  double a10 = GPSensor.get_heading();
  turnRight();
  double x1 = status1.x;
  double y1 = status1.y;
  pros::delay(10);
  double x2 = status2.x;
  double y2 = status2.y;
  pros::delay(10);
  double x3 = status3.x;
  double y3 = status3.y;
  pros::delay(10);
  double x4 = status4.x;
  double y4 = status4.y;
  pros::delay(10);
  double x5 = status5.x;
  double y5 = status5.y;
  pros::delay(10);
  double y6 = status6.y;
  double x6 = status6.x;
  pros::delay(10);
  double x7 = status7.x;
  double y7 = status7.y;
  pros::delay(10);
  double x8 = status8.x;
  double y8 = status8.y;
  pros::delay(10);
  double x9 = status9.x;
  double y9 = status9.y;
  pros::delay(10);
  double x10 = status10.x;
  double y10 = status10.y;
  xcomp = ((x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10)/10) + xcord;
  ycomp = ((y1 + y2 + y3 + y4 + y5 + y6 + y7 + y8 + y9 + y10)/10) + ycord;
  if(xcomp >= 0 && ycomp >= 0){
    angle = atan(xcomp/ycomp)*57.2957757776502 + 180;
  }
  if(xcomp >= 0 && ycomp < 0){
    angle = abs(atan(xcomp/ycomp)*57.2957757776502);
    angle = 360 - angle;
  }
  else if(xcomp < 0 && ycomp >= 0){
    angle = 180 - abs(atan(xcomp/ycomp)*57.2957757776502);
  }
  else if(xcomp < 0 && ycomp < 0){
    angle = atan(xcomp/ycomp)*57.2957757776502;
  }
  while(bool1 == true){
    if(GPSensor.get_heading() == angle){
      bool1 = false;
      DriveStop();
    }
  }
  DriveStop();
}
*/












/*
FrontClawOpen();
encoderTurn2(12000, 55);
FrontClawClose();
mobile_goal.move_voltage(-12000);
encoderTurn(-12000, 7);
mobile_goal.move_voltage(0);
encoderDrive(7000, 20);
//SKILLS
chassis->setState({0_in, 0_in, 0_deg});
encoderDrive(-4000, 2);
FrontClawOpen();
RearClawUp();
mobile_goal.move_voltage(-12000);
pros::delay(250);
mobile_goal.move_voltage(0);
hturnRight(8000);
profileController->generatePath(
{{0_ft, 0_ft, 0_deg}, {-3.2_ft, -5.2_ft, 0_deg}}, "A");
pros::delay(1300);
hturnTo(175, 4000);
hturnTo(180, 3000);
pros::delay(200);
intakeIn(10000);
xdriveTo(9000, 183, 0.7);
intakeIn(-8000);
mobile_goal.move_voltage(12000);
xdriveTo(6000, 183, 1.3);
timeDrive(6000, 100);
intakeIn(8000);
FrontClawClose();
encoderDrive(-5000, 2);
mobile_goal.move_voltage(-12000);
pros::delay(300);
encoderDrive(6000, 2.5);
profileController1->generatePath(
{{0_ft, 0_ft, 0_deg}, {-3.25_ft, -2.7_ft, -90_deg}}, "B");
mobile_goal.move_voltage(0);
encoderTurn1(-6000, 7.9);
pros::delay(25);
turnTo(90, 10);
encoderDrive(6000, 44);
mobile_goal.move_voltage(-6200);
pros::delay(25);
encoderDrive(-5000, 15);
intakeIn(-12000);
profileController->setTarget("A");
profileController->waitUntilSettled();
mobile_goal.move_voltage(12000);
pros::delay(900);
FrontClawOpen();
mobile_goal.move_voltage(-12000);
pros::delay(500);
mobile_goal.move_voltage(0);
intakeIn(8000);
turnTo(89, 12);
mobile_goal.move_voltage(12000);
encoderDrive(-5500, 19);
pros::delay(100);
encoderDrive(6500, 5);
pros::delay(300);
encoderTurn(5000, 19);
pros::delay(300);
encoderDrive(6000, 22);
mobile_goal.move_voltage(0);
FrontClawClose();
mobile_goal.move_voltage(-12000);
pros::delay(500);
mobile_goal.move_voltage(0);
encoderTurn1(-6000, 9);
MobileGoalUp();
turnTo(143, 10);
profileController1->setTarget("B");
profileController1->waitUntilSettled();
encoderDrive(-6000, 0.8);
pros::delay(200);
mobile_goal.move_voltage(12000);
pros::delay(150);
FrontClawOpen();
mobile_goal.move_voltage(0);
encoderDrive(-4000, 3);
mobile_goal.move_voltage(-12000);
pros::delay(500);
mobile_goal.move_voltage(0);
encoderDrive(-5000, 5);
turnTo(55, 10);
pros::delay(25);
mobile_goal.move_voltage(12000);
encoderTurn(-5000, 9.3);
pros::delay(300);
yidriveTo(8000, 330, -0.00);
mobile_goal.move_voltage(0);
FrontClawClose();
mobile_goal.move_voltage(-12000);
pros::delay(500);
mobile_goal.move_voltage(0);
encoderTurn1(-6000, 18.6);
pros::delay(100);
turnTo(130, 15);
mobile_goal.move_voltage(-9000);
ydriveTo(6000, 130, -1.06);
mobile_goal.move_voltage(12000);
pros::delay(500);
FrontClawOpen();
mobile_goal.move_voltage(0);
encoderDrive(-5000, 6);
mobile_goal.move_voltage(12000);
encoderTurn1(6000, 4);
pros::delay(100);
turnTo(210, 10);
yidriveTo(8000, 210, 0.1);
FrontClawClose();
mobile_goal.move_voltage(-12000);
pros::delay(500);
mobile_goal.move_voltage(0);
encoderTurn(-5000, 14.5);
turnTo(60, 25);
mobile_goal.move_voltage(-8500);
ydriveTo(6000, 60, -1.05);
mobile_goal.move_voltage(12000);
pros::delay(500);
FrontClawOpen();
mobile_goal.move_voltage(0);
encoderDrive(-5000, 5);

turnTo(180, 8000);
pros::delay(100);
turnTo(180, 5000);
pros::delay(100);
turnTo(180, 3000);
pros::delay(100);
turnTo(180, 2000);
pros::delay(1000);
*/






std::shared_ptr<ChassisController> myChassis = ChassisControllerBuilder()
.withMotors({11,12,13}, {17,18,19})
// Green gearset, 4 in wheel diam, 11.5 in wheel track
.withDimensions(AbstractMotor::gearset::blue, {{1.95_in, 14.87_in}, quadEncoderTPR})
.build();

std::shared_ptr<AsyncMotionProfileController> profileController = AsyncMotionProfileControllerBuilder()
.withLimits({
  1.0, // Maximum linear velocity of the Chassis in m/s
  2.0, // Maximum linear acceleration of the Chassis in m/s/s
  10.0 // Maximum linear jerk of the Chassis in m/s/s/s
})

.withOutput(myChassis)
.buildMotionProfileController();

std::shared_ptr<ChassisController> myChassis1 = ChassisControllerBuilder()
.withMotors({11,12,13}, {17,18,19})
// Green gearset, 4 in wheel diam, 11.5 in wheel track
.withDimensions(AbstractMotor::gearset::blue, {{1.95_in, 14.87_in}, quadEncoderTPR})
.build();

std::shared_ptr<AsyncMotionProfileController> profileController1 = AsyncMotionProfileControllerBuilder()
.withLimits({
  0.8, // Maximum linear velocity of the Chassis in m/s
  2.0, // Maximum linear acceleration of the Chassis in m/s/s
  10.0 // Maximum linear jerk of the Chassis in m/s/s/s
})
.withOutput(myChassis1)
.buildMotionProfileController();

std::shared_ptr<ChassisController> myChassis2 = ChassisControllerBuilder()
.withMotors({11,12,13}, {17,18,19})
// Green gearset, 4 in wheel diam, 11.5 in wheel track
.withDimensions(AbstractMotor::gearset::blue, {{1.95_in, 14.87_in}, quadEncoderTPR})
.build();

std::shared_ptr<AsyncMotionProfileController> profileController2 = AsyncMotionProfileControllerBuilder()
.withLimits({
  2.0, // Maximum linear velocity of the Chassis in m/s
  3.0, // Maximum linear acceleration of the Chassis in m/s/s
  10.0 // Maximum linear jerk of the Chassis in m/s/s/s
})

.withOutput(myChassis2)
.buildMotionProfileController();
